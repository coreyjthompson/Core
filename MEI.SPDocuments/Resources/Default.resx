<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action_Fail" xml:space="preserve">
    <value>{0} Fail</value>
  </data>
  <data name="Action_Success" xml:space="preserve">
    <value>{0} Success</value>
  </data>
  <data name="Action_Unknown_Error" xml:space="preserve">
    <value>{0} Unknown Error</value>
  </data>
  <data name="Could_not_append_value_from_enumerated_type___0" xml:space="preserve">
    <value>Could not append value from enumerated type '{0}'.</value>
  </data>
  <data name="Could_not_remove_value_from_enumerated_type___0" xml:space="preserve">
    <value>Could not remove value from enumerated type '{0}'.</value>
  </data>
  <data name="Could_not_retrieve_document_at_Url__0" xml:space="preserve">
    <value>Could not retrieve document at Url {0}. DocumentAcronym|{1};UserName|{2}</value>
  </data>
  <data name="displayNameLong_already_exists_in_collection" xml:space="preserve">
    <value>displayNameLong already exists in collection.</value>
  </data>
  <data name="displayNameShort_already_exists_in_collection" xml:space="preserve">
    <value>displayNameShort already exists in collection.</value>
  </data>
  <data name="does_not_have_ViewOriginal_or_ViewWatermarked_privilege_on_document_acronym__1_" xml:space="preserve">
    <value>{0} does not have ViewOriginal or ViewWatermarked privilege on document acronym {1}</value>
  </data>
  <data name="Invalid_acronym_value__0" xml:space="preserve">
    <value>Invalid acronym. value:{0}</value>
  </data>
  <data name="Invalid_delimitedSearchvalues__Expected_count_was__0_value_1" xml:space="preserve">
    <value>Invalid delimitedSearchValues. Expected count was {0}. value: {1}</value>
  </data>
  <data name="Invalid_documentType_value__0" xml:space="preserve">
    <value>Invalid documentType. value:{0}</value>
  </data>
  <data name="Invalid_name_value__0" xml:space="preserve">
    <value>Invalid name. value:{0}</value>
  </data>
  <data name="ParseFileName_Invalid__fileName__must_be_of_type" xml:space="preserve">
    <value>Invalid fileName - {0}; the {1} must be of type {2}</value>
  </data>
  <data name="Permission_denied" xml:space="preserve">
    <value>Permission denied. {0}</value>
  </data>
  <data name="RenameDocument__New_fileName__0_" xml:space="preserve">
    <value>|New fileName:{0}</value>
  </data>
  <data name="The_documentAcronym_specified_was_not_found___0" xml:space="preserve">
    <value>The documentAcronym specified was not found. {0}</value>
  </data>
  <data name="The_documentType_specified_was_not_found___0" xml:space="preserve">
    <value>The documentType specified was not found. {0}</value>
  </data>
  <data name="The_internalName_specified_was_not_found___0" xml:space="preserve">
    <value>The internalName specified was not found. {0}</value>
  </data>
  <data name="Upload_Vendor_Menu_Upload_Is_Only_Valid_for_MEIUniversal" xml:space="preserve">
    <value>Vendor Menu Upload Is Only Valid for MEIUniversal</value>
  </data>
  <data name="ValidateFields_Invalid__filename__not_found_in_database" xml:space="preserve">
    <value>{0} not found in database. {1}|{2}|{3}</value>
  </data>
  <data name="Validation_Failed_0" xml:space="preserve">
    <value>Validation Failed. {0}</value>
  </data>
  <data name="enumMember_already_exists_in_collection" xml:space="preserve">
    <value>enumMember already exists in collection.</value>
  </data>
  <data name="enumMember_does_not_exist_in_collection" xml:space="preserve">
    <value>enumMember does not exist in collection.</value>
  </data>
  <data name="T_must_be_an_enumerated_type" xml:space="preserve">
    <value>T must be an enumerated type.</value>
  </data>
  <data name="node_does_not_contain_any_results" xml:space="preserve">
    <value>node does not contain any results.</value>
  </data>
  <data name="No_message_returned" xml:space="preserve">
    <value>No message returned.</value>
  </data>
  <data name="can_not_add_undefined_company" xml:space="preserve">
    <value>can not add undefined company.</value>
  </data>
  <data name="can_not_add_undefined_documentType" xml:space="preserve">
    <value>can not add undefined documentType</value>
  </data>
  <data name="can_not_add_undefined_enumName" xml:space="preserve">
    <value>can not add undefined enumName.</value>
  </data>
  <data name="can_not_add_undefined_internalName" xml:space="preserve">
    <value>can not add undefined internalName.</value>
  </data>
  <data name="company_already_exists_in_collection__0" xml:space="preserve">
    <value>company already exists in collection. {0}</value>
  </data>
  <data name="documentType_already_exists_in_collection__0" xml:space="preserve">
    <value>documentType already exists in collection. {0}</value>
  </data>
  <data name="enumName_already_exists_in_collection__0" xml:space="preserve">
    <value>enumName already exists in collection. {0}</value>
  </data>
  <data name="internalName_already_exists_in_collection__0" xml:space="preserve">
    <value>"internalName already exists in collection. {0}</value>
  </data>
  <data name="node_does_not_contain_a_url_attribute" xml:space="preserve">
    <value>node does not contain a url attribute.</value>
  </data>
  <data name="node_does_not_contain_a_version_attribute" xml:space="preserve">
    <value>node does not contain a version attribute.</value>
  </data>
  <data name="the_enumName_specified_was_not_found__0" xml:space="preserve">
    <value>the enumName specified was not found. {0}</value>
  </data>
  <data name="Unknown_Error__WebService_did_not_return_values" xml:space="preserve">
    <value>Unknown Error - WebService did not return values</value>
  </data>
  <data name="Invalid__0__filename___1__The_file_must_have_one_of_these_extensions__2__" xml:space="preserve">
    <value>Invalid {0} filename. {1} The file must have one of these extensions {2}.</value>
  </data>
  <data name="Invalid__0__filename___1__The_filename_must_contain__2__parts_" xml:space="preserve">
    <value>Invalid {0} filename. {1} The filename must contain {2} parts.</value>
  </data>
  <data name="Invalid__0__filename___1__The_filename_must_begin_with__2__" xml:space="preserve">
    <value>Invalid {0} filename. {1} The filename must begin with {2}.</value>
  </data>
  <data name="The_properties_of_this_result_do_not_contain_this_property_name___0_" xml:space="preserve">
    <value>The properties of this result do not contain this property name. {0}</value>
  </data>
  <data name="Unable_to_get_web_path_of_document" xml:space="preserve">
    <value>Unable to get web path of document.</value>
  </data>
  <data name="Filename_was_invalid" xml:space="preserve">
    <value>Filename was invalid</value>
  </data>
  <data name="File_was_not_saved_correctly" xml:space="preserve">
    <value>File was not saved correctly</value>
  </data>
  <data name="File_was_saved_correctly" xml:space="preserve">
    <value>File was saved correctly</value>
  </data>
  <data name="Value_should_be_in_range___0___1">
      <value xml:space="preserve">Value should be in range [{0}-{1}]</value>
  </data>
  <data name="Value_should_be_of_length___0___1">
      <value xml:space="preserve">Value should be of length [{0}-{1}]</value>
  </data>
  <data name="Value_Count_must_be_in_range___0___1">
      <value xml:space="preserve">Value.Count must be in range [{0}-{1}]</value>
  </data>
</root>
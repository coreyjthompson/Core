// <auto-generated />
using System;
using MEI.Core.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MEI.Core.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20191210150901_RenamedTravelServiceToTravelAgencyService")]
    partial class RenamedTravelServiceToTravelAgencyService
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MEI.Core.DomainModels.Common.AuditEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName");

                    b.Property<string>("CorrelationId");

                    b.Property<string>("Data");

                    b.Property<string>("Environment");

                    b.Property<string>("MachineName");

                    b.Property<string>("Operation");

                    b.Property<string>("UserName");

                    b.Property<DateTimeOffset>("WhenExecuted");

                    b.HasKey("Id");

                    b.ToTable("AuditEntry");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityTown");

                    b.Property<string>("Country");

                    b.Property<string>("Initials");

                    b.Property<string>("Name");

                    b.Property<string>("PostalCode");

                    b.Property<string>("SharePointCompanyCode");

                    b.Property<string>("StateProvince");

                    b.Property<string>("StreetAddressLine1");

                    b.Property<string>("StreetAddressLine2");

                    b.Property<string>("TollFreePhoneNumber");

                    b.Property<string>("WebsiteUrl");

                    b.Property<DateTimeOffset>("WhenCreated");

                    b.Property<DateTimeOffset?>("WhenDeactivated");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoCode");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoSymbol");

                    b.Property<string>("Name");

                    b.Property<string>("RegionName");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName")
                        .HasMaxLength(500);

                    b.Property<string>("Callsite")
                        .HasMaxLength(300);

                    b.Property<string>("CorrelationId");

                    b.Property<string>("Environment")
                        .HasMaxLength(200);

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(5);

                    b.Property<string>("Logger")
                        .HasMaxLength(300);

                    b.Property<string>("MachineName")
                        .HasMaxLength(200);

                    b.Property<string>("Message");

                    b.Property<string>("Properties");

                    b.Property<DateTimeOffset>("WhenLogged");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.WorkflowCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("WhenInactivated");

                    b.HasKey("Id");

                    b.ToTable("WorkflowCategory");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.WorkflowStep", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("StepOrder");

                    b.Property<DateTimeOffset?>("WhenInactivated");

                    b.Property<int>("WorkflowCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowCategoryId");

                    b.ToTable("WorkflowStep");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.AgencyService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeeCurrencyId");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("FeeCurrencyId");

                    b.ToTable("AgencyService","Travel");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId");

                    b.Property<int?>("ConsultantId");

                    b.Property<string>("ConsultantName");

                    b.Property<int?>("EventId");

                    b.Property<string>("EventName");

                    b.Property<string>("SabreInvoiceId");

                    b.Property<string>("SubmittingUser");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Invoice","Travel");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.InvoiceLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceId");

                    b.Property<long>("Quantity");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("InvoiceLineItem","Travel");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.InvoiceWorkflowStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<int>("InvoiceId");

                    b.Property<string>("Notes");

                    b.Property<DateTimeOffset>("WhenCreated");

                    b.Property<int>("WorkflowStepId");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("InvoiceWorkflowStatus","Travel");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.StateProvince", b =>
                {
                    b.HasOne("MEI.Core.DomainModels.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Common.WorkflowStep", b =>
                {
                    b.HasOne("MEI.Core.DomainModels.Common.WorkflowCategory", "WorkflowCategory")
                        .WithMany()
                        .HasForeignKey("WorkflowCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.AgencyService", b =>
                {
                    b.HasOne("MEI.Core.DomainModels.Common.Currency", "FeeCurrency")
                        .WithMany()
                        .HasForeignKey("FeeCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.Invoice", b =>
                {
                    b.HasOne("MEI.Core.DomainModels.Common.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.InvoiceLineItem", b =>
                {
                    b.HasOne("MEI.Core.DomainModels.Travel.Invoice")
                        .WithMany("LineItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MEI.Core.DomainModels.Travel.AgencyService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MEI.Core.DomainModels.Travel.InvoiceWorkflowStatus", b =>
                {
                    b.HasOne("MEI.Core.DomainModels.Travel.Invoice", "Invoice")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MEI.Core.DomainModels.Common.WorkflowStep", "WorkflowStep")
                        .WithMany()
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
